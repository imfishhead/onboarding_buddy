<div class="h-screen bg-gray-50 flex flex-col">
  <!-- Header -->
  <header class="bg-white shadow-sm border-b border-gray-200 px-4 py-3 flex-shrink-0">
    <div class="flex items-center justify-between">
      <h1 class="text-xl font-semibold text-gray-900">Onboarding Buddy</h1>
      <div class="flex items-center space-x-2">
        <span class="material-icons text-gray-600">notifications</span>
        <span class="material-icons text-gray-600">account_circle</span>
      </div>
    </div>
  </header>

  <!-- Main Content -->
  <main class="flex-1 overflow-hidden">
    <!-- Chat Tab Content -->
    <div id="chat-tab" class="h-full flex flex-col <%= 'hidden' unless params[:tab] != 'mood' %>">
      <!-- Task List Section (Top 50%) -->
      <div class="task-section flex-1 overflow-y-auto border-b">
        <div class="task-header p-4">
          <div class="flex items-center justify-between mb-4">
            <h2 class="task-title">今日任務</h2>
            <div class="task-progress">
              <span class="progress-text"><%= @done %>/<%= @total %></span>
              <div class="progress-bar">
                <div class="progress-fill" style="width: <%= @progress %>%"></div>
              </div>
            </div>
          </div>
        </div>
        <div class="task-list-container p-4">
          <div class="task-list">
            <% @assignments.each do |assignment| %>
              <div class="task-card <%= assignment.done? ? 'completed' : 'pending' %>">
                <div class="task-content">
                  <div class="task-checkbox">
                    <% if assignment.done? %>
                      <button onclick="toggleTask(<%= assignment.id %>, false)" class="checkbox-btn completed" title="點擊取消完成">
                        <span class="material-icons">check_circle</span>
                      </button>
                    <% else %>
                      <button onclick="toggleTask(<%= assignment.id %>, true)" class="checkbox-btn pending" title="點擊完成任務">
                        <span class="material-icons">radio_button_unchecked</span>
                      </button>
                    <% end %>
                  </div>
                  <div class="task-info">
                    <h3 class="task-name"><%= assignment.onboarding_task.title %></h3>
                    <div class="task-meta">
                      <span class="task-status <%= assignment.done? ? 'status-completed' : 'status-pending' %>">
                        <%= assignment.done? ? '已完成' : '待完成' %>
                      </span>
                      <% if assignment.due_date %>
                        <span class="task-due">
                          <%= assignment.due_date.strftime("%m/%d") %>
                        </span>
                      <% end %>
                    </div>
                  </div>
                </div>
                <% unless assignment.done? %>
                  <div class="task-actions">
                    <button onclick="toggleTask(<%= assignment.id %>, true)" class="action-btn">
                      <span class="material-icons">done</span>
                    </button>
                  </div>
                <% end %>
              </div>
            <% end %>
          </div>
        </div>
      </div>

      <!-- Chat Section (Bottom 50%) -->
      <div class="flex-1 flex flex-col chat-container">
        <div id="chat-messages" class="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50">
          <% if @messages.empty? %>
            <div class="text-left">
              <div class="inline-block px-3 py-2 rounded-2xl bg-gray-100 text-gray-800">
                <p class="text-sm">你好！我是你的入職小助手。有什麼問題需要幫助嗎？</p>
              </div>
            </div>
          <% else %>
            <% @messages.each do |message| %>
              <div class="<%= message.user? ? 'text-right' : 'text-left' %>" data-message-id="<%= message.id %>">
                <div class="inline-block px-3 py-2 rounded-2xl <%= message.user? ? 'bg-indigo-600 text-white' : 'bg-gray-100 text-gray-800' %>">
                  <%= simple_format message.content %>
                </div>
                <% if message.meta.present? %>
                  <div class="text-xs text-gray-500 mt-1 <%= message.user? ? 'text-right' : 'text-left' %>">
                    <%= message.meta.slice("intent","topics").to_json %>
                  </div>
                <% end %>
              </div>
            <% end %>
          <% end %>
        </div>

        <!-- Chat Input -->
        <div class="flex-shrink-0 p-4 border-t bg-white">
          <%= form_with url: create_message_path, method: :post, class: "flex gap-2 items-center", id: "chat-form" do |form| %>
            <%= form.hidden_field :as, value: params[:as] %>
            <%= form.text_field :message, placeholder: "問我任何入職/生活問題，例如：通勤車怎麼申請？",
                  class: "flex-1 border rounded-lg px-3 py-2", id: "message-input" %>
            <%= form.submit "送出", class: "px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700" %>
          <% end %>
        </div>
      </div>
    </div>

    <!-- Mood Check-in Tab Content -->
    <div id="mood-tab" class="h-full flex flex-col <%= 'hidden' if params[:tab] != 'mood' %>">
      <div class="flex-1 overflow-y-auto p-4">
        <div class="text-center mb-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-2">今日心情</h2>
          <p class="text-gray-600">記錄你的幸福能量</p>
        </div>

        <!-- Breathing Ring -->
        <div class="card p-6 mb-6">
          <div class="text-center mb-4">
            <h3 class="text-lg font-semibold text-gray-900">呼吸環</h3>
          </div>
          
          <!-- Breathing Ring Container -->
          <div class="flex justify-center items-center mb-6">
            <div class="breathing-ring-container">
              <div id="breathingRing" 
                   class="breathing-ring" 
                   data-energy="<%= @happiness_wallet.current_points || 0 %>"
                   data-mood="<%= @mood_score || 3 %>">
                <div class="ring-inner">
                  <div class="ring-pulse"></div>
                </div>
                <div class="ring-outer">
                  <div class="ring-glow"></div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Energy Info -->
          <div class="text-center">
            <div class="mb-3">
              <p class="text-sm text-gray-600">目前能量：<%= (@happiness_wallet.current_points || 0) %> 點</p>
              <p class="text-xs text-gray-500">心情狀態：<%= case @mood_label when "low" then "低迷" when "tense" then "緊繃" when "stable" then "穩定" when "fresh" then "清爽" else "充沛" end %> (平均 <%= @mood_score %>)</p>
              <p class="text-xs text-gray-400">基於最近三次心情記錄的加權平均</p>
            </div>
            
            <!-- Breathing Exercise Controls -->
            <div class="flex justify-center gap-2 mb-3">
              <button id="breath-4s" onclick="startBreathingExercise(4)" class="px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition-colors">
                4秒呼吸
              </button>
              <button id="breath-6s" onclick="startBreathingExercise(6)" class="px-3 py-1 text-xs bg-green-100 text-green-700 rounded-full hover:bg-green-200 transition-colors">
                6秒呼吸
              </button>
              <button id="breath-8s" onclick="startBreathingExercise(8)" class="px-3 py-1 text-xs bg-purple-100 text-purple-700 rounded-full hover:bg-purple-200 transition-colors">
                8秒呼吸
              </button>
            </div>
            
            <!-- Valence-Arousal Test Controls -->
            <div class="mb-3">
              <h5 class="text-xs text-gray-500 mb-2">測試 Valence-Arousal 顏色</h5>
              <div class="flex flex-wrap justify-center gap-1">
                <button onclick="testValenceArousal(-0.8, 0.3)" class="px-2 py-1 text-xs bg-slate-100 text-slate-700 rounded-full hover:bg-slate-200 transition-colors">
                  低迷
                </button>
                <button onclick="testValenceArousal(-0.4, 0.6)" class="px-2 py-1 text-xs bg-indigo-100 text-indigo-700 rounded-full hover:bg-indigo-200 transition-colors">
                  緊繃
                </button>
                <button onclick="testValenceArousal(0.0, 0.4)" class="px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200 transition-colors">
                  穩定
                </button>
                <button onclick="testValenceArousal(0.6, 0.5)" class="px-2 py-1 text-xs bg-emerald-100 text-emerald-700 rounded-full hover:bg-emerald-200 transition-colors">
                  清爽
                </button>
                <button onclick="testValenceArousal(0.9, 0.8)" class="px-2 py-1 text-xs bg-yellow-100 text-yellow-700 rounded-full hover:bg-yellow-200 transition-colors">
                  充沛
                </button>
              </div>
            </div>
            
            <p class="text-xs text-gray-500">跟隨呼吸環的節奏，讓心情平靜下來</p>
          </div>
        </div>

        <!-- Mood Check-in Options -->
        <div class="space-y-3">
          <h4 class="text-md font-medium text-gray-900">快速記錄心情</h4>
          <div class="grid grid-cols-5 gap-2">
            <button onclick="openMoodDialog(1, '😢', '難過')" class="flex flex-col items-center p-3 bg-white rounded-lg border border-gray-200 hover:border-red-300 transition-colors">
              <span class="text-2xl mb-1">😢</span>
              <span class="text-xs text-gray-600">難過</span>
            </button>
            <button onclick="openMoodDialog(2, '😐', '普通')" class="flex flex-col items-center p-3 bg-white rounded-lg border border-gray-200 hover:border-yellow-300 transition-colors">
              <span class="text-2xl mb-1">😐</span>
              <span class="text-xs text-gray-600">普通</span>
            </button>
            <button onclick="openMoodDialog(3, '😊', '開心')" class="flex flex-col items-center p-3 bg-white rounded-lg border border-gray-200 hover:border-green-300 transition-colors">
              <span class="text-2xl mb-1">😊</span>
              <span class="text-xs text-gray-600">開心</span>
            </button>
            <button onclick="openMoodDialog(4, '😄', '興奮')" class="flex flex-col items-center p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 transition-colors">
              <span class="text-2xl mb-1">😄</span>
              <span class="text-xs text-gray-600">興奮</span>
            </button>
            <button onclick="openMoodDialog(5, '🤩', '超棒')" class="flex flex-col items-center p-3 bg-white rounded-lg border border-gray-200 hover:border-purple-300 transition-colors">
              <span class="text-2xl mb-1">🤩</span>
              <span class="text-xs text-gray-600">超棒</span>
            </button>
          </div>
        </div>

        <!-- Recent Mood History -->
        <div class="mt-6">
          <h4 class="text-md font-medium text-gray-900 mb-3">最近心情記錄</h4>
          <div class="space-y-2">
            <% if @mood_checkins.any? %>
              <% @mood_checkins.each do |checkin| %>
                <div class="flex items-center justify-between p-3 bg-white rounded-lg border border-gray-200">
                  <div class="flex items-center space-x-3">
                    <span class="text-xl"><%= mood_emoji(checkin.score) %></span>
                    <div>
                      <p class="text-sm text-gray-900"><%= format_mood_date(checkin.created_at) %></p>
                      <p class="text-xs text-gray-500">
                        <%= checkin.note.present? ? checkin.note : mood_description(checkin.score) %>
                      </p>
                    </div>
                  </div>
                  <span class="text-xs text-gray-400"><%= format_mood_time(checkin.created_at) %></span>
                </div>
              <% end %>
            <% else %>
              <div class="text-center py-8 text-gray-500">
                <span class="material-icons text-4xl mb-2">mood</span>
                <p class="text-sm">還沒有心情記錄</p>
                <p class="text-xs">點擊上方按鈕開始記錄你的心情吧！</p>
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Bottom Tab Navigation -->
  <nav class="bg-white border-t-2 border-gray-300 flex flex-shrink-0 shadow-lg">
    <button onclick="showTab('chat')" id="chat-tab-btn" class="flex-1 flex flex-col items-center justify-center py-4 px-4 text-sm font-semibold transition-all duration-200 text-blue-600 bg-blue-50 border-r border-gray-200">
      <span class="material-icons mb-1 text-xl">chat</span>
      <span>聊天室</span>
    </button>
    <button onclick="showTab('mood')" id="mood-tab-btn" class="flex-1 flex flex-col items-center justify-center py-4 px-4 text-sm font-semibold transition-all duration-200 text-gray-500 bg-white">
      <span class="material-icons mb-1 text-xl">mood</span>
      <span>心情打卡</span>
    </button>
  </nav>
</div>

<!-- Mood Dialog -->
<div id="mood-dialog" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
      <div class="text-center mb-6">
        <div id="mood-emoji" class="text-6xl mb-3">😊</div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">記錄你的心情</h3>
        <p class="text-gray-600">告訴我們你今天感覺如何？</p>
      </div>
      
      <%= form_with url: my_mood_checkins_path, method: :post, local: true, id: "mood-form" do |form| %>
        <%= form.hidden_field :as, value: params[:as] %>
        <%= form.hidden_field :score, id: "mood-score" %>
        
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">心情筆記（選填）</label>
          <%= form.text_area :note, placeholder: "分享你今天的心情或想法...", class: "w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none", rows: 3 %>
        </div>
        
        <div class="flex space-x-3">
          <button type="button" onclick="closeMoodDialog()" class="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
            取消
          </button>
          <button type="submit" class="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
            記錄心情
          </button>
        </div>
      <% end %>
    </div>
  </div>
</div>

<!-- Encouragement Toast -->
<div id="encouragement-toast" class="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 hidden">
  <div class="bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg flex items-center space-x-3">
    <span class="material-icons text-2xl">celebration</span>
    <div>
      <p class="font-semibold" id="encouragement-title">太棒了！</p>
      <p class="text-sm" id="encouragement-message">感謝你分享心情！</p>
      <img src="https://cataas.com/cat/says/all+is+well" alt="幸福能量貓" class="mx-auto mb-2 rounded-lg shadow-lg" style="max-height: 200px;">
    </div>
  </div>
</div>

<script>
function showTab(tabName) {
  // Hide all tabs
  document.getElementById('chat-tab').classList.add('hidden');
  document.getElementById('mood-tab').classList.add('hidden');
  
  // Reset all buttons to inactive state
  document.getElementById('chat-tab-btn').className = 'flex-1 flex flex-col items-center justify-center py-4 px-4 text-sm font-semibold transition-all duration-200 text-gray-500 bg-white';
  document.getElementById('mood-tab-btn').className = 'flex-1 flex flex-col items-center justify-center py-4 px-4 text-sm font-semibold transition-all duration-200 text-gray-500 bg-white';
  
  // Show selected tab and update button
  if (tabName === 'chat') {
    document.getElementById('chat-tab').classList.remove('hidden');
    document.getElementById('chat-tab-btn').className = 'flex-1 flex flex-col items-center justify-center py-4 px-4 text-sm font-semibold transition-all duration-200 text-blue-600 bg-blue-50 border-r border-gray-200';
  } else if (tabName === 'mood') {
    document.getElementById('mood-tab').classList.remove('hidden');
    document.getElementById('mood-tab-btn').className = 'flex-1 flex flex-col items-center justify-center py-4 px-4 text-sm font-semibold transition-all duration-200 text-blue-600 bg-blue-50';
  }
}

function openMoodDialog(score, emoji, label) {
  document.getElementById('mood-score').value = score;
  document.getElementById('mood-emoji').textContent = emoji;
  document.getElementById('mood-dialog').classList.remove('hidden');
}

function closeMoodDialog() {
  document.getElementById('mood-dialog').classList.add('hidden');
  document.getElementById('mood-form').reset();
}

function showEncouragement(score) {
  const encouragementMessages = {
    1: { title: "沒關係的", message: "每個人都會有低潮，你並不孤單 💙" },
    2: { title: "慢慢來", message: "給自己一些時間，一切都會好起來的 🌱" },
    3: { title: "很好！", message: "保持這樣的心情，繼續加油！ ✨" },
    4: { title: "太棒了！", message: "你的好心情感染了我們！ 🌟" },
    5: { title: "超讚！", message: "你的正能量滿滿，繼續發光發熱！ 🚀" }
  };
  
  const encouragement = encouragementMessages[score] || encouragementMessages[3];
  document.getElementById('encouragement-title').textContent = encouragement.title;
  document.getElementById('encouragement-message').textContent = encouragement.message;
  
  const toast = document.getElementById('encouragement-toast');
  toast.classList.remove('hidden');
  
  // Auto hide after 3 seconds
  setTimeout(() => {
    toast.classList.add('hidden');
  }, 3000);
}

// Handle form submission
document.addEventListener('DOMContentLoaded', function() {
  // Chat functionality
  const chatForm = document.getElementById('chat-form');
  const messageInput = document.getElementById('message-input');
  const chatMessages = document.getElementById('chat-messages');
  
  console.log('Chat elements found:', { chatForm, messageInput, chatMessages });
  
  if (chatForm && messageInput && chatMessages) {
    console.log('Chat form found, setting up event listeners');
    // 自動滾動到底部
    function scrollToBottom() {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // 初始化時滾動到底部
    scrollToBottom();
    
    // 表單提交處理
    chatForm.addEventListener('submit', function(e) {
      console.log('Form submitted!');
      e.preventDefault();
      
      const message = messageInput.value.trim();
      console.log('Message:', message);
      if (!message) return;
      
      // 立即添加用戶訊息到聊天室
      addUserMessage(message);
      
      // 清空輸入框
      messageInput.value = '';
      
      // 添加 loading 氣泡
      addLoadingMessage();
      
      // 滾動到底部
      scrollToBottom();
      
      // 發送 AJAX 請求
      const formData = new FormData();
      formData.append('message', message);
      formData.append('as', chatForm.querySelector('input[name="as"]').value);
      
      console.log('Form data:', {
        message: message,
        as: chatForm.querySelector('input[name="as"]').value
      });
      
      fetch(chatForm.action, {
        method: 'POST',
        body: formData,
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Accept': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
      })
      .then(response => {
        console.log('Response status:', response.status);
        console.log('Response headers:', response.headers.get('content-type'));
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.success && data.message) {
          updateLoadingMessage(data.message.content);
          scrollToBottom();
        }
      })
      .catch(error => {
        console.error('Error:', error);
        updateLoadingMessage('抱歉，發生錯誤，請稍後再試。');
        scrollToBottom();
      });
    });
    
    // 添加用戶訊息
    function addUserMessage(content) {
      const messageDiv = document.createElement('div');
      messageDiv.className = 'text-right';
      messageDiv.innerHTML = `
        <div class="inline-block px-3 py-2 rounded-2xl bg-indigo-600 text-white">
          <p class="text-sm">${content.replace(/\n/g, '<br>')}</p>
        </div>
      `;
      chatMessages.appendChild(messageDiv);
    }
    
    // 添加 loading 氣泡
    function addLoadingMessage() {
      const messageDiv = document.createElement('div');
      messageDiv.className = 'text-left loading-message';
      messageDiv.innerHTML = `
        <div class="inline-block px-3 py-2 rounded-2xl bg-gray-100 text-gray-800">
          <p class="text-sm">
            <div class="loading-dots">
              <div></div>
              <div></div>
              <div></div>
              <div></div>
            </div>
          </p>
        </div>
      `;
      chatMessages.appendChild(messageDiv);
    }
    
    // 更新 loading 訊息為實際回覆
    function updateLoadingMessage(content) {
      const loadingMessage = document.querySelector('.loading-message');
      if (loadingMessage) {
        loadingMessage.className = 'text-left';
        loadingMessage.innerHTML = `
          <div class="inline-block px-3 py-2 rounded-2xl bg-gray-100 text-gray-800">
            <p class="text-sm">${content.replace(/\n/g, '<br>')}</p>
          </div>
        `;
      }
    }
  }
  
  const moodForm = document.getElementById('mood-form');
  if (moodForm) {
    moodForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const submitButton = moodForm.querySelector('button[type="submit"]');
      const originalText = submitButton.textContent;
      
      // Disable submit button to prevent double submission
      submitButton.disabled = true;
      submitButton.textContent = '提交中...';
      
      const formData = new FormData(moodForm);
      const score = parseInt(formData.get('score'));
      
      // Submit form via fetch
      fetch(moodForm.action, {
        method: 'POST',
        body: formData,
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
          'Accept': 'application/json'
        }
      })
      .then(response => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error('Network response was not ok');
        }
      })
      .then(data => {
        closeMoodDialog();
        showMoodFeedback(data.feedback, data.suggestions, data.show_resources);
        // Reset form and button state
        moodForm.reset();
        submitButton.disabled = false;
        submitButton.textContent = originalText;
      })
      .catch(error => {
        console.error('Error:', error);
        alert('提交失敗，請重試');
        // Reset button state on error
        submitButton.disabled = false;
        submitButton.textContent = originalText;
      });
    });
  }
});

// Close dialog when clicking outside
document.getElementById('mood-dialog').addEventListener('click', function(e) {
  if (e.target === this) {
    closeMoodDialog();
  }
});

// Task completion functionality
function toggleTask(assignmentId, complete) {
  const status = complete ? 'done' : 'pending';
  
  // Show loading state
  const button = event.target;
  const originalText = button.textContent;
  button.textContent = '...';
  button.disabled = true;
  
  fetch(`/my/onboarding/complete/${assignmentId}`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
      'Accept': 'application/json'
    },
    body: JSON.stringify({ status: status, as: '<%= params[:as] %>' })
  })
  .then(response => {
    if (response.ok) {
      return response.json();
    } else {
      throw new Error('Network response was not ok');
    }
  })
  .then(data => {
    // Show success message
    showTaskSuccessMessage(data.message || 'Task updated successfully!');
    // Reload the page to show updated status
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  })
  .catch(error => {
    console.error('Error:', error);
    // Restore button state
    button.textContent = originalText;
    button.disabled = false;
    alert('更新任務狀態失敗，請重試');
  });
}

// Show task success message
function showTaskSuccessMessage(message) {
  // Create a temporary success message
  const successDiv = document.createElement('div');
  successDiv.className = 'fixed top-4 left-1/2 transform -translate-x-1/2 z-50 bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg flex items-center space-x-3';
  successDiv.innerHTML = `
    <span class="material-icons text-2xl">check_circle</span>
    <div>
      <p class="font-semibold">Success!</p>
      <p class="text-sm">${message}</p>
    </div>
  `;
  
  document.body.appendChild(successDiv);
  
  // Remove after 2 seconds
  setTimeout(() => {
    successDiv.remove();
  }, 2000);
}

// Show mood feedback and suggestions
function showMoodFeedback(feedback, suggestions, showResources) {
  // Create feedback modal
  const feedbackModal = document.createElement('div');
  feedbackModal.id = 'mood-feedback-modal';
  feedbackModal.className = 'fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4';
  feedbackModal.innerHTML = `
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
      <div class="text-center mb-6">
        <span class="material-icons text-6xl text-blue-500 mb-3">mood</span>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">感謝分享</h3>
        <p class="text-gray-600">${feedback}</p>
        <img src="https://cataas.com/cat/says/all+is+well" alt="幸福能量貓" class="mx-auto mb-2 rounded-lg shadow-lg" style="max-height: 200px;">
      </div>
      
      ${suggestions.length > 0 ? `
        <div class="mb-6">
          <h4 class="text-md font-medium text-gray-900 mb-3">建議</h4>
          <div class="space-y-2">
            ${suggestions.map(suggestion => `
              <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div>
                  <p class="text-sm font-medium text-gray-900">${suggestion.title}</p>
                  <p class="text-xs text-gray-500">${suggestion.description}</p>
                </div>
                <button onclick="handleSuggestion('${suggestion.type}')" class="text-blue-500 hover:text-blue-600 text-sm font-medium">
                  ${suggestion.action}
                </button>
              </div>
            `).join('')}
          </div>
        </div>
      ` : ''}
      
      ${showResources ? `
        <div class="mb-6 p-4 bg-blue-50 rounded-lg">
          <div class="flex items-center space-x-2 mb-2">
            <span class="material-icons text-blue-500">info</span>
            <h4 class="text-sm font-medium text-blue-900">我們注意到你最近心情不太好</h4>
          </div>
          <p class="text-xs text-blue-700">公司有很多支援資源可以幫助你，不要猶豫尋求幫助。</p>
        </div>
      ` : ''}
      
      <div class="flex justify-center">
        <button onclick="closeFeedbackModal()" class="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
          知道了
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(feedbackModal);
}

// Close feedback modal
function closeFeedbackModal() {
  const modal = document.getElementById('mood-feedback-modal');
  if (modal) {
    modal.remove();
  }
}

// Handle suggestion actions
function handleSuggestion(type) {
  switch(type) {
    case 'breathing':
      alert('呼吸練習：深吸氣 4 秒，屏氣 4 秒，呼氣 4 秒，重複幾次。');
      break;
    case 'social':
      alert('你可以聯繫 HR 部門或同事聊聊，他們都很樂意幫助你。');
      break;
    case 'hr_event':
      alert('HR 小聚會：每週五下午 3:00，地點在會議室 A。');
      break;
    case 'wellness':
      alert('員工健康資源：請查看公司內部網站或聯繫 HR 了解更多。');
      break;
    default:
      alert('感謝你的關注！');
  }
}

// Breathing Ring Functions
function initBreathingRing() {
  const ring = document.getElementById('breathingRing');
  if (!ring) return;
  
  const energy = parseInt(ring.dataset.energy) || 0;
  const mood = parseInt(ring.dataset.mood) || 3;
  
  // 根據能量和心情設定呼吸環的狀態
  updateBreathingRing(energy, mood);
}

function updateBreathingRing(energy, mood) {
  const ring = document.getElementById('breathingRing');
  if (!ring) return;
  
  // 計算呼吸速度：低能量→慢，高能量→快
  const baseSpeed = 3; // 基礎速度（秒）
  const energyMultiplier = Math.max(0.5, Math.min(2.0, 1 + (energy / 50))); // 0.5x 到 2x
  const speed = baseSpeed / energyMultiplier;
  
  // 根據 Valence-Arousal 模型計算顏色
  const { valence, arousal, color } = calculateValenceArousalColor(mood);
  
  // 計算亮度：基於 arousal（激發度）
  const brightness = 0.4 + (arousal * 0.6); // 0.4 到 1.0
  
  // 平滑更新 CSS 變數
  ring.style.setProperty('--breathing-speed', `${speed}s`);
  ring.style.setProperty('--ring-brightness', brightness);
  ring.style.setProperty('--ring-color', color);
  ring.style.setProperty('--valence', valence);
  ring.style.setProperty('--arousal', arousal);
  
  // 更新動畫
  const pulse = ring.querySelector('.ring-pulse');
  const glow = ring.querySelector('.ring-glow');
  
  if (pulse) {
    pulse.style.animationDuration = `${speed}s`;
  }
  if (glow) {
    glow.style.animationDuration = `${speed}s`;
  }
}

// Valence-Arousal 模型顏色計算
function calculateValenceArousalColor(mood) {
  // 將 1-5 分數（支持小數）映射到 Valence-Arousal 空間
  const moodScore = parseFloat(mood);
  
  // 線性插值計算 Valence 和 Arousal
  // Valence: 1分(-0.8) → 5分(0.9)
  const valence = -0.8 + (moodScore - 1) * (0.9 - (-0.8)) / (5 - 1);
  
  // Arousal: 1分(0.3) → 5分(0.8)，但中間有變化
  let arousal;
  if (moodScore <= 2) {
    // 1-2分：arousal 上升 (0.3 → 0.6)
    arousal = 0.3 + (moodScore - 1) * 0.3;
  } else if (moodScore <= 3) {
    // 2-3分：arousal 下降 (0.6 → 0.4)
    arousal = 0.6 - (moodScore - 2) * 0.2;
  } else {
    // 3-5分：arousal 上升 (0.4 → 0.8)
    arousal = 0.4 + (moodScore - 3) * 0.2;
  }
  
  // 根據 Valence-Arousal 計算 HSL 顏色
  const color = valenceArousalToColor(valence, arousal);
  
  return { valence, arousal, color };
}

// 將 Valence-Arousal 轉換為顏色
function valenceArousalToColor(valence, arousal) {
  // 色相：基於 valence（-1 到 +1）
  // 負面情緒 → 藍色系 (240°)
  // 正面情緒 → 黃綠色系 (60°-120°)
  let hue;
  if (valence < 0) {
    // 負面：藍色到紫色 (240° - 300°)
    hue = 240 + (valence * -60); // -1 → 300°, 0 → 240°
  } else {
    // 正面：黃色到綠色 (60° - 120°)
    hue = 60 + (valence * 60); // 0 → 60°, 1 → 120°
  }
  
  // 飽和度：基於 arousal（0 到 1）
  const saturation = 30 + (arousal * 50); // 30% 到 80%
  
  // 亮度：基於 arousal（0 到 1）
  const lightness = 45 + (arousal * 25); // 45% 到 70%
  
  return `hsl(${Math.round(hue)}, ${Math.round(saturation)}%, ${Math.round(lightness)}%)`;
}

function startBreathingExercise(duration) {
  const ring = document.getElementById('breathingRing');
  if (!ring) return;
  
  // 停止任何現有的練習
  stopBreathingExercise();
  
  // 設定呼吸練習模式
  ring.classList.add('breathing-exercise');
  ring.style.setProperty('--breathing-speed', `${duration}s`);
  
  // 更新動畫
  const pulse = ring.querySelector('.ring-pulse');
  const glow = ring.querySelector('.ring-glow');
  
  if (pulse) {
    pulse.style.animationDuration = `${duration}s`;
  }
  if (glow) {
    glow.style.animationDuration = `${duration}s`;
  }
  
  // 更新按鈕狀態
  updateBreathingButtons(duration, true);
  
  // 顯示指導文字和控制面板
  showBreathingGuide(duration);
  
  // 開始呼吸階段指示
  startBreathingPhases(duration);
  
  // 30秒後自動停止練習模式
  setTimeout(() => {
    stopBreathingExercise();
  }, 30000);
}

function showBreathingGuide(duration) {
  // 創建或更新指導文字
  let guide = document.getElementById('breathingGuide');
  if (!guide) {
    guide = document.createElement('div');
    guide.id = 'breathingGuide';
    guide.className = 'fixed top-4 left-1/2 transform -translate-x-1/2 z-50 bg-blue-500 text-white px-6 py-4 rounded-lg shadow-lg';
    document.body.appendChild(guide);
  }
  
  guide.innerHTML = `
    <div class="text-center">
      <p class="font-semibold">呼吸練習</p>
      <p class="text-sm">跟隨呼吸環的節奏</p>
      <p class="text-xs">吸氣 ${duration} 秒，呼氣 ${duration} 秒</p>
      <button onclick="stopBreathingExercise()" class="mt-2 px-3 py-1 text-xs bg-white text-blue-500 rounded-full hover:bg-gray-100 transition-colors">
        停止練習
      </button>
    </div>
  `;
}

function stopBreathingExercise() {
  const ring = document.getElementById('breathingRing');
  if (ring) {
    ring.classList.remove('breathing-exercise');
    initBreathingRing(); // 恢復正常狀態
  }
  
  // 恢復按鈕狀態
  updateBreathingButtons(null, false);
  
  // 移除指導文字
  const guide = document.getElementById('breathingGuide');
  if (guide && guide.parentNode) {
    guide.parentNode.removeChild(guide);
  }
  
  // 移除階段指示
  const phaseIndicator = document.getElementById('breathingPhase');
  if (phaseIndicator && phaseIndicator.parentNode) {
    phaseIndicator.parentNode.removeChild(phaseIndicator);
  }
}

function updateBreathingButtons(activeDuration, isActive) {
  const buttons = [
    { id: 'breath-4s', duration: 4, colors: 'bg-blue-100 text-blue-700 hover:bg-blue-200' },
    { id: 'breath-6s', duration: 6, colors: 'bg-green-100 text-green-700 hover:bg-green-200' },
    { id: 'breath-8s', duration: 8, colors: 'bg-purple-100 text-purple-700 hover:bg-purple-200' }
  ];
  
  buttons.forEach(button => {
    const element = document.getElementById(button.id);
    if (element) {
      if (isActive && activeDuration === button.duration) {
        // 當前活動的按鈕
        element.className = `px-3 py-1 text-xs bg-gray-300 text-gray-600 rounded-full cursor-not-allowed transition-colors`;
        element.disabled = true;
      } else if (isActive) {
        // 其他按鈕在練習中時禁用
        element.className = `px-3 py-1 text-xs bg-gray-100 text-gray-400 rounded-full cursor-not-allowed transition-colors`;
        element.disabled = true;
      } else {
        // 恢復正常狀態
        element.className = `px-3 py-1 text-xs ${button.colors} rounded-full hover:bg-opacity-80 transition-colors`;
        element.disabled = false;
      }
    }
  });
}

function startBreathingPhases(duration) {
  // 創建呼吸階段指示器
  let phaseIndicator = document.getElementById('breathingPhase');
  if (!phaseIndicator) {
    phaseIndicator = document.createElement('div');
    phaseIndicator.id = 'breathingPhase';
    phaseIndicator.className = 'fixed bottom-20 left-1/2 transform -translate-x-1/2 z-50 bg-white text-gray-800 px-4 py-2 rounded-lg shadow-lg border';
    document.body.appendChild(phaseIndicator);
  }
  
  let isInhaling = true;
  let timeLeft = duration;
  
  function updatePhase() {
    if (timeLeft <= 0) {
      isInhaling = !isInhaling;
      timeLeft = duration;
    }
    
    phaseIndicator.innerHTML = `
      <div class="text-center">
        <p class="text-sm font-semibold ${isInhaling ? 'text-blue-600' : 'text-green-600'}">
          ${isInhaling ? '吸氣' : '呼氣'}
        </p>
        <p class="text-xs text-gray-500">${timeLeft} 秒</p>
      </div>
    `;
    
    timeLeft--;
  }
  
  // 立即更新一次
  updatePhase();
  
  // 每秒更新
  const interval = setInterval(updatePhase, 1000);
  
  // 30秒後清除間隔
  setTimeout(() => {
    clearInterval(interval);
  }, 30000);
}

// 測試 Valence-Arousal 組合
function testValenceArousal(valence, arousal) {
  const ring = document.getElementById('breathingRing');
  if (!ring) return;
  
  // 直接使用 Valence-Arousal 值計算顏色
  const color = valenceArousalToColor(valence, arousal);
  const brightness = 0.4 + (arousal * 0.6);
  
  // 更新呼吸環
  ring.style.setProperty('--ring-color', color);
  ring.style.setProperty('--ring-brightness', brightness);
  ring.style.setProperty('--valence', valence);
  ring.style.setProperty('--arousal', arousal);
  
  // 顯示當前值
  showValenceArousalInfo(valence, arousal, color);
}

// 顯示 Valence-Arousal 信息
function showValenceArousalInfo(valence, arousal, color) {
  let info = document.getElementById('valenceArousalInfo');
  if (!info) {
    info = document.createElement('div');
    info.id = 'valenceArousalInfo';
    info.className = 'fixed bottom-20 left-1/2 transform -translate-x-1/2 z-50 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg text-xs';
    document.body.appendChild(info);
  }
  
  info.innerHTML = `
    <div class="text-center">
      <p>Valence: ${valence.toFixed(1)} | Arousal: ${arousal.toFixed(1)}</p>
      <p>Color: ${color}</p>
    </div>
  `;
  
  // 3秒後淡出
  setTimeout(() => {
    info.style.opacity = '0';
    info.style.transition = 'opacity 0.5s';
    setTimeout(() => {
      if (info.parentNode) {
        info.parentNode.removeChild(info);
      }
    }, 500);
  }, 3000);
}

// 初始化呼吸環
document.addEventListener('DOMContentLoaded', initBreathingRing);
document.addEventListener('turbo:load', initBreathingRing);
</script>

<style>
/* Chat Bubble Styles */
.chat-message {
  max-width: 80%;
  padding: 12px 16px;
  border-radius: 18px;
  position: relative;
  word-wrap: break-word;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  transition: all 0.2s ease;
}

.chat-message:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}

.chat-message.user {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  margin-left: auto;
  border-bottom-right-radius: 4px;
}

.chat-message.user::before {
  content: '';
  position: absolute;
  bottom: 0;
  right: -8px;
  width: 0;
  height: 0;
  border: 8px solid transparent;
  border-left-color: #764ba2;
  border-bottom: none;
  border-right: none;
}

.chat-message.bot {
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  color: #495057;
  border: 1px solid #dee2e6;
  margin-right: auto;
  border-bottom-left-radius: 4px;
}

.chat-message.bot::before {
  content: '';
  position: absolute;
  bottom: 0;
  left: -8px;
  width: 0;
  height: 0;
  border: 8px solid transparent;
  border-right-color: #e9ecef;
  border-bottom: none;
  border-left: none;
}

.chat-message p {
  margin: 0;
  line-height: 1.4;
}

.chat-message .timestamp {
  font-size: 10px;
  opacity: 0.7;
  margin-top: 4px;
  text-align: right;
}

.chat-message.bot .timestamp {
  text-align: left;
}

/* Chat Container Styles */
.chat-container {
  background: linear-gradient(180deg, #f8f9fa 0%, #ffffff 100%);
  min-height: 300px;
}

.chat-input-container {
  background: white;
  border-top: 1px solid #e9ecef;
  backdrop-filter: blur(10px);
}

.chat-input {
  background: #f8f9fa;
  border: 2px solid transparent;
  transition: all 0.3s ease;
}

.chat-input:focus {
  background: white;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.send-button {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  transition: all 0.3s ease;
}

.send-button:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
}

.send-button:active {
  transform: translateY(0);
}

/* Loading Dots Animation */
.loading-dots {
  display: inline-block;
  position: relative;
  width: 40px;
  height: 20px;
}

.loading-dots div {
  position: absolute;
  top: 50%;
  width: 6px;
  height: 6px;
  border-radius: 50%;
  background: #9ca3af;
  animation-timing-function: cubic-bezier(0, 1, 1, 0);
}

.loading-dots div:nth-child(1) {
  left: 6px;
  animation: loading-dots1 0.6s infinite;
}

.loading-dots div:nth-child(2) {
  left: 6px;
  animation: loading-dots2 0.6s infinite;
}

.loading-dots div:nth-child(3) {
  left: 26px;
  animation: loading-dots2 0.6s infinite;
}

.loading-dots div:nth-child(4) {
  left: 45px;
  animation: loading-dots3 0.6s infinite;
}

@keyframes loading-dots1 {
  0% { transform: scale(0); }
  100% { transform: scale(1); }
}

@keyframes loading-dots3 {
  0% { transform: scale(1); }
  100% { transform: scale(0); }
}

@keyframes loading-dots2 {
  0% { transform: translate(0, 0); }
  100% { transform: translate(19px, 0); }
}

/* Breathing Ring Styles */
.breathing-ring-container {
  position: relative;
  width: 200px;
  height: 200px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.breathing-ring {
  position: relative;
  width: 100%;
  height: 100%;
  --breathing-speed: 3s;
  --ring-brightness: 0.8;
  --ring-color: #f59e0b;
  --valence: 0;
  --arousal: 0.4;
  /* 平滑顏色過渡 */
  transition: --ring-color 1.5s cubic-bezier(0.4, 0, 0.2, 1),
              --ring-brightness 1.5s cubic-bezier(0.4, 0, 0.2, 1);
}

.ring-inner {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: radial-gradient(circle, var(--ring-color) 0%, transparent 70%);
  opacity: var(--ring-brightness);
  /* 平滑顏色和透明度過渡 */
  transition: background 1.5s cubic-bezier(0.4, 0, 0.2, 1),
              opacity 1.5s cubic-bezier(0.4, 0, 0.2, 1);
}

.ring-pulse {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background: var(--ring-color);
  opacity: 0.3;
  animation: breathe var(--breathing-speed) ease-in-out infinite;
  /* 平滑顏色過渡 */
  transition: background 1.5s cubic-bezier(0.4, 0, 0.2, 1);
}

.ring-outer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 160px;
  height: 160px;
  border-radius: 50%;
  border: 2px solid var(--ring-color);
  opacity: var(--ring-brightness);
  /* 平滑邊框顏色和透明度過渡 */
  transition: border-color 1.5s cubic-bezier(0.4, 0, 0.2, 1),
              opacity 1.5s cubic-bezier(0.4, 0, 0.2, 1);
}

.ring-glow {
  position: absolute;
  top: -4px;
  left: -4px;
  width: calc(100% + 8px);
  height: calc(100% + 8px);
  border-radius: 50%;
  border: 1px solid var(--ring-color);
  opacity: 0.6;
  animation: breathe var(--breathing-speed) ease-in-out infinite reverse;
  filter: blur(1px);
  /* 平滑邊框顏色過渡 */
  transition: border-color 1.5s cubic-bezier(0.4, 0, 0.2, 1);
}

/* 呼吸動畫 */
@keyframes breathe {
  0%, 100% {
    transform: scale(1);
    opacity: 0.3;
  }
  50% {
    transform: scale(1.2);
    opacity: 0.8;
  }
}

/* 呼吸練習模式 */
.breathing-ring.breathing-exercise .ring-pulse {
  animation: breathe var(--breathing-speed) ease-in-out infinite;
}

.breathing-ring.breathing-exercise .ring-glow {
  animation: breathe var(--breathing-speed) ease-in-out infinite reverse;
}

/* 響應式設計 */
@media (max-width: 640px) {
  .breathing-ring-container {
    width: 150px;
    height: 150px;
  }
  
  .ring-inner {
    width: 60px;
    height: 60px;
  }
  
  .ring-outer {
    width: 120px;
    height: 120px;
  }
}

/* 低動態偏好 */
@media (prefers-reduced-motion: reduce) {
  .ring-pulse,
  .ring-glow {
    animation: none;
  }
  
  .breathing-ring {
    --ring-brightness: 0.6;
  }
}
</style>
