<%= render 'onboarding_tasks' %>
<%= render 'chat_content' %>
<%= render 'mood_content' %>

<!-- 能量球動畫和 JavaScript -->
<script>
  // 提交心情打卡 - 提前定義以避免 ReferenceError
  function submitMoodCheckin(moodScore) {
    // 立即更新能量球視覺效果
    if (typeof updateEnergyBall === 'function') {
      updateEnergyBall(moodScore);
    }
    
    // 發送 AJAX 請求到後端
    fetch('/my/mood_checkins', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({
        score: moodScore,
        as: new URLSearchParams(window.location.search).get('as')
      })
    })
    .then(response => {
      if (response.ok) {
        // 成功後重新載入頁面以更新能量條和顯示反饋
        window.location.reload();
      } else {
        console.error('心情打卡失敗');
      }
    })
    .catch(error => {
      console.error('網路錯誤:', error);
    });
  }
  // 常駐能量球系統
  document.addEventListener('DOMContentLoaded', function() {
    const energyBar = document.getElementById('energy-bar');
    const energyCard = document.getElementById('energy-card');
    const permanentEnergyBall = document.getElementById('permanent-energy-ball');
    
    // 初始化常駐能量球
    let currentMoodScore = 3; // 預設為普通心情
    
    // 檢查是否需要播放動畫
    const shouldAnimate = energyBar && (
      energyBar.dataset.animate === 'true' || 
      window.location.search.includes('mood_checked=true')
    );
    
    // 添加測試按鈕（開發用）
    if (energyCard && !document.getElementById('test-animation-container')) {
      const testContainer = document.createElement('div');
      testContainer.className = 'absolute top-2 right-2 flex flex-col gap-1';
      testContainer.id = 'test-animation-container';
      
      const moods = [
        { score: 1, emoji: '😢', label: '很糟', color: 'bg-blue-500' },
        { score: 2, emoji: '☹️', label: '不佳', color: 'bg-purple-500' },
        { score: 3, emoji: '😐', label: '普通', color: 'bg-green-500' },
        { score: 4, emoji: '🙂', label: '不錯', color: 'bg-orange-500' },
        { score: 5, emoji: '😄', label: '超棒', color: 'bg-yellow-500' }
      ];
      
      moods.forEach(mood => {
        const testBtn = document.createElement('button');
        testBtn.innerHTML = `${mood.emoji}`;
        testBtn.className = `w-8 h-8 text-xs ${mood.color} text-white rounded hover:opacity-80 transition`;
        testBtn.title = `${mood.label} (${mood.score}分)`;
        testBtn.onclick = function() {
          updateEnergyBall(mood.score);
        };
        testContainer.appendChild(testBtn);
      });
      
      energyCard.appendChild(testContainer);
    }
    
    if (shouldAnimate) {
      triggerEnergyAnimation();
    }
    
    // 創建常駐能量球
    function createPermanentEnergyBall(moodScore = 3) {
      if (!permanentEnergyBall) return;
      
      // 清空現有內容
      permanentEnergyBall.innerHTML = '';
      
      // 根據心情分數選擇顏色方案
      const colorSchemes = {
        1: { // 很糟 - 深藍色系
          colors: [
            { color: '#1e3a8a', radius: '18px', duration: '2.5s' },
            { color: '#3730a3', radius: '13px', duration: '5s' },
            { color: '#1e40af', radius: '15px', duration: '7.5s' },
            { color: '#3b82f6', radius: '20px', duration: '10s' }
          ],
          centerGlow: 'radial-gradient(circle, #60a5fa 0%, #3b82f6 50%, transparent 100%)'
        },
        2: { // 不佳 - 紫色系
          colors: [
            { color: '#581c87', radius: '18px', duration: '2.5s' },
            { color: '#7c3aed', radius: '13px', duration: '5s' },
            { color: '#8b5cf6', radius: '15px', duration: '7.5s' },
            { color: '#a78bfa', radius: '20px', duration: '10s' }
          ],
          centerGlow: 'radial-gradient(circle, #c4b5fd 0%, #8b5cf6 50%, transparent 100%)'
        },
        3: { // 普通 - 綠色系
          colors: [
            { color: '#166534', radius: '18px', duration: '2.5s' },
            { color: '#16a34a', radius: '13px', duration: '5s' },
            { color: '#22c55e', radius: '15px', duration: '7.5s' },
            { color: '#4ade80', radius: '20px', duration: '10s' }
          ],
          centerGlow: 'radial-gradient(circle, #86efac 0%, #22c55e 50%, transparent 100%)'
        },
        4: { // 不錯 - 橙色系
          colors: [
            { color: '#ea580c', radius: '18px', duration: '2.5s' },
            { color: '#f97316', radius: '13px', duration: '5s' },
            { color: '#fb923c', radius: '15px', duration: '7.5s' },
            { color: '#fdba74', radius: '20px', duration: '10s' }
          ],
          centerGlow: 'radial-gradient(circle, #fed7aa 0%, #fb923c 50%, transparent 100%)'
        },
        5: { // 超棒 - 金黃色系
          colors: [
            { color: '#fbbf24', radius: '18px', duration: '2.5s' },
            { color: '#f59e0b', radius: '13px', duration: '5s' },
            { color: '#eab308', radius: '15px', duration: '7.5s' },
            { color: '#fde047', radius: '20px', duration: '10s' }
          ],
          centerGlow: 'radial-gradient(circle, #fef3c7 0%, #fbbf24 50%, transparent 100%)'
        }
      };
      
      const scheme = colorSchemes[moodScore] || colorSchemes[3];
      
      // 創建旋轉的光球
      scheme.colors.forEach((config, index) => {
        const energySpan = document.createElement('span');
        energySpan.style.position = 'absolute';
        energySpan.style.width = `calc(80px + ${config.radius})`;
        energySpan.style.height = `calc(80px + ${config.radius})`;
        energySpan.style.background = config.color;
        energySpan.style.borderRadius = '50%';
        energySpan.style.transformOrigin = `calc(40px + ${config.radius})`;
        energySpan.style.animation = `energyRotate ${config.duration} linear infinite`;
        energySpan.style.mixBlendMode = 'plus-lighter';
        energySpan.style.filter = 'blur(12px)';
        energySpan.style.opacity = '0.6';
        
        // 偶數元素反向旋轉
        if (index % 2 === 1) {
          energySpan.style.animationDirection = 'reverse';
        }
        
        permanentEnergyBall.appendChild(energySpan);
      });
      
      // 中心發光點
      const centerGlow = document.createElement('div');
      centerGlow.style.position = 'absolute';
      centerGlow.style.left = '50%';
      centerGlow.style.top = '50%';
      centerGlow.style.transform = 'translate(-50%, -50%)';
      centerGlow.style.width = '16px';
      centerGlow.style.height = '16px';
      centerGlow.style.background = scheme.centerGlow;
      centerGlow.style.borderRadius = '50%';
      centerGlow.style.filter = 'blur(4px)';
      centerGlow.style.animation = 'energyPulse 2s ease-in-out infinite alternate';
      permanentEnergyBall.appendChild(centerGlow);
    }
    
    // 更新能量球顏色 - 漸變效果
    function updateEnergyBall(moodScore) {
      const targetScore = moodScore;
      
      // 漸變到目標心情
      animateToMood(targetScore);
      
      // 同時更新能量條顏色
      if (energyBar) {
        const colorSchemes = {
          1: 'linear-gradient(to right, #1e40af, #3b82f6, #1e40af)',
          2: 'linear-gradient(to right, #7c3aed, #a78bfa, #7c3aed)',
          3: 'linear-gradient(to right, #16a34a, #4ade80, #16a34a)',
          4: 'linear-gradient(to right, #f97316, #fdba74, #f97316)',
          5: 'linear-gradient(to right, #f59e0b, #fde047, #f59e0b)'
        };
        
        const newGradient = colorSchemes[moodScore] || colorSchemes[3];
        energyBar.style.background = newGradient;
        energyBar.style.transition = 'background 1.5s ease-in-out';
      }
    }
    
    // 漸變動畫到目標心情
    function animateToMood(targetScore) {
      const steps = Math.abs(targetScore - currentMoodScore);
      const duration = 1500; // 1.5秒總動畫時間
      const stepDuration = duration / (steps + 1);
      
      let currentStep = 0;
      
      function nextStep() {
        if (currentStep <= steps) {
          const progress = currentStep / (steps + 1);
          const intermediateScore = Math.round(currentMoodScore + (targetScore - currentMoodScore) * progress);
          
          // 創建過渡效果的能量球
          createTransitionEnergyBall(intermediateScore, progress);
          
          currentStep++;
          setTimeout(nextStep, stepDuration);
        } else {
          // 最終狀態
          currentMoodScore = targetScore;
          createPermanentEnergyBall(targetScore);
          
          // 添加「養成」效果
          addNurturingEffect(targetScore);
        }
      }
      
      nextStep();
    }
    
    // 創建過渡效果的能量球
    function createTransitionEnergyBall(score, progress) {
      if (!permanentEnergyBall) return;
      
      // 清空現有內容
      permanentEnergyBall.innerHTML = '';
      
      const colorSchemes = {
        1: { colors: [
          { color: '#1e3a8a', radius: '18px', duration: '2.5s' },
          { color: '#3730a3', radius: '13px', duration: '5s' },
          { color: '#1e40af', radius: '15px', duration: '7.5s' },
          { color: '#3b82f6', radius: '20px', duration: '10s' }
        ], centerGlow: 'radial-gradient(circle, #60a5fa 0%, #3b82f6 50%, transparent 100%)' },
        2: { colors: [
          { color: '#581c87', radius: '18px', duration: '2.5s' },
          { color: '#7c3aed', radius: '13px', duration: '5s' },
          { color: '#8b5cf6', radius: '15px', duration: '7.5s' },
          { color: '#a78bfa', radius: '20px', duration: '10s' }
        ], centerGlow: 'radial-gradient(circle, #c4b5fd 0%, #8b5cf6 50%, transparent 100%)' },
        3: { colors: [
          { color: '#166534', radius: '18px', duration: '2.5s' },
          { color: '#16a34a', radius: '13px', duration: '5s' },
          { color: '#22c55e', radius: '15px', duration: '7.5s' },
          { color: '#4ade80', radius: '20px', duration: '10s' }
        ], centerGlow: 'radial-gradient(circle, #86efac 0%, #22c55e 50%, transparent 100%)' },
        4: { colors: [
          { color: '#ea580c', radius: '18px', duration: '2.5s' },
          { color: '#f97316', radius: '13px', duration: '5s' },
          { color: '#fb923c', radius: '15px', duration: '7.5s' },
          { color: '#fdba74', radius: '20px', duration: '10s' }
        ], centerGlow: 'radial-gradient(circle, #fed7aa 0%, #fb923c 50%, transparent 100%)' },
        5: { colors: [
          { color: '#fbbf24', radius: '18px', duration: '2.5s' },
          { color: '#f59e0b', radius: '13px', duration: '5s' },
          { color: '#eab308', radius: '15px', duration: '7.5s' },
          { color: '#fde047', radius: '20px', duration: '10s' }
        ], centerGlow: 'radial-gradient(circle, #fef3c7 0%, #fbbf24 50%, transparent 100%)' }
      };
      
      const scheme = colorSchemes[score] || colorSchemes[3];
      
      // 根據進度調整透明度和大小
      const opacity = 0.4 + (progress * 0.4); // 0.4 到 0.8
      const scale = 0.8 + (progress * 0.2); // 0.8 到 1.0
      
      // 創建旋轉的光球
      scheme.colors.forEach((config, index) => {
        const energySpan = document.createElement('span');
        energySpan.style.position = 'absolute';
        energySpan.style.width = `calc(${80 * scale}px + ${config.radius})`;
        energySpan.style.height = `calc(${80 * scale}px + ${config.radius})`;
        energySpan.style.background = config.color;
        energySpan.style.borderRadius = '50%';
        energySpan.style.transformOrigin = `calc(${40 * scale}px + ${config.radius})`;
        energySpan.style.animation = `energyRotate ${config.duration} linear infinite`;
        energySpan.style.mixBlendMode = 'plus-lighter';
        energySpan.style.filter = 'blur(12px)';
        energySpan.style.opacity = opacity;
        energySpan.style.transition = 'all 0.3s ease-in-out';
        
        // 偶數元素反向旋轉
        if (index % 2 === 1) {
          energySpan.style.animationDirection = 'reverse';
        }
        
        permanentEnergyBall.appendChild(energySpan);
      });
      
      // 中心發光點
      const centerGlow = document.createElement('div');
      centerGlow.style.position = 'absolute';
      centerGlow.style.left = '50%';
      centerGlow.style.top = '50%';
      centerGlow.style.transform = 'translate(-50%, -50%)';
      centerGlow.style.width = `${16 * scale}px`;
      centerGlow.style.height = `${16 * scale}px`;
      centerGlow.style.background = scheme.centerGlow;
      centerGlow.style.borderRadius = '50%';
      centerGlow.style.filter = 'blur(4px)';
      centerGlow.style.animation = 'energyPulse 2s ease-in-out infinite alternate';
      centerGlow.style.transition = 'all 0.3s ease-in-out';
      permanentEnergyBall.appendChild(centerGlow);
    }
    
    // 添加「養成」效果
    function addNurturingEffect(score) {
      if (!permanentEnergyBall) return;
      
      // 根據心情分數添加不同的養成效果
      const nurturingEffects = {
        1: { emoji: '💙', message: '能量球感受到你的關懷，正在慢慢恢復...', color: '#3b82f6' },
        2: { emoji: '💜', message: '能量球開始發光，你的陪伴讓它感到溫暖', color: '#8b5cf6' },
        3: { emoji: '💚', message: '能量球穩定成長，保持這個節奏！', color: '#22c55e' },
        4: { emoji: '🧡', message: '能量球充滿活力，你的正能量感染了它！', color: '#fb923c' },
        5: { emoji: '💛', message: '能量球閃閃發光，你們的連結越來越強！', color: '#fbbf24' }
      };
      
      const effect = nurturingEffects[score] || nurturingEffects[3];
      
      // 創建養成提示
      const nurturingTip = document.createElement('div');
      nurturingTip.style.position = 'absolute';
      nurturingTip.style.top = '-40px';
      nurturingTip.style.left = '50%';
      nurturingTip.style.transform = 'translateX(-50%)';
      nurturingTip.style.background = 'rgba(255, 255, 255, 0.95)';
      nurturingTip.style.padding = '8px 12px';
      nurturingTip.style.borderRadius = '20px';
      nurturingTip.style.fontSize = '12px';
      nurturingTip.style.color = effect.color;
      nurturingTip.style.fontWeight = '500';
      nurturingTip.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
      nurturingTip.style.border = `2px solid ${effect.color}20`;
      nurturingTip.style.animation = 'fadeInUp 0.5s ease-out';
      nurturingTip.innerHTML = `${effect.emoji} ${effect.message}`;
      
      permanentEnergyBall.appendChild(nurturingTip);
      
      // 3秒後移除提示
      setTimeout(() => {
        if (nurturingTip.parentNode) {
          nurturingTip.style.animation = 'fadeOutUp 0.5s ease-in forwards';
          setTimeout(() => nurturingTip.remove(), 500);
        }
      }, 3000);
      
      // 添加能量球「開心」的動畫
      const energySpans = permanentEnergyBall.querySelectorAll('span');
      energySpans.forEach((span, index) => {
        setTimeout(() => {
          span.style.animation = `energyHappy 0.8s ease-in-out ${index * 0.1}s`;
        }, 100);
      });
    }
    
    // 將函數設為全域，供按鈕調用
    window.updateEnergyBall = updateEnergyBall;
    
    // 初始化常駐能量球
    createPermanentEnergyBall(currentMoodScore);
    
    function triggerEnergyAnimation(moodScore = null) {
      if (!energyBar || !energyCard) return;
      
      // 根據心情分數選擇顏色方案
      const colorSchemes = {
        1: { // 很糟 - 深藍色系（冷靜、沉穩）
          colors: [
            { color: '#1e3a8a', radius: '18px', duration: '2.5s' },
            { color: '#3730a3', radius: '13px', duration: '5s' },
            { color: '#1e40af', radius: '15px', duration: '7.5s' },
            { color: '#3b82f6', radius: '20px', duration: '10s' }
          ],
          centerGlow: 'radial-gradient(circle, #60a5fa 0%, #3b82f6 50%, transparent 100%)',
          energyBar: 'linear-gradient(to right, #1e40af, #3b82f6, #1e40af)'
        },
        2: { // 不佳 - 紫色系（神秘、內省）
          colors: [
            { color: '#581c87', radius: '18px', duration: '2.5s' },
            { color: '#7c3aed', radius: '13px', duration: '5s' },
            { color: '#8b5cf6', radius: '15px', duration: '7.5s' },
            { color: '#a78bfa', radius: '20px', duration: '10s' }
          ],
          centerGlow: 'radial-gradient(circle, #c4b5fd 0%, #8b5cf6 50%, transparent 100%)',
          energyBar: 'linear-gradient(to right, #7c3aed, #a78bfa, #7c3aed)'
        },
        3: { // 普通 - 綠色系（平衡、自然）
          colors: [
            { color: '#166534', radius: '18px', duration: '2.5s' },
            { color: '#16a34a', radius: '13px', duration: '5s' },
            { color: '#22c55e', radius: '15px', duration: '7.5s' },
            { color: '#4ade80', radius: '20px', duration: '10s' }
          ],
          centerGlow: 'radial-gradient(circle, #86efac 0%, #22c55e 50%, transparent 100%)',
          energyBar: 'linear-gradient(to right, #16a34a, #4ade80, #16a34a)'
        },
        4: { // 不錯 - 橙色系（溫暖、活力）
          colors: [
            { color: '#ea580c', radius: '18px', duration: '2.5s' },
            { color: '#f97316', radius: '13px', duration: '5s' },
            { color: '#fb923c', radius: '15px', duration: '7.5s' },
            { color: '#fdba74', radius: '20px', duration: '10s' }
          ],
          centerGlow: 'radial-gradient(circle, #fed7aa 0%, #fb923c 50%, transparent 100%)',
          energyBar: 'linear-gradient(to right, #f97316, #fdba74, #f97316)'
        },
        5: { // 超棒 - 金黃色系（快樂、能量）
          colors: [
            { color: '#fbbf24', radius: '18px', duration: '2.5s' },
            { color: '#f59e0b', radius: '13px', duration: '5s' },
            { color: '#eab308', radius: '15px', duration: '7.5s' },
            { color: '#fde047', radius: '20px', duration: '10s' }
          ],
          centerGlow: 'radial-gradient(circle, #fef3c7 0%, #fbbf24 50%, transparent 100%)',
          energyBar: 'linear-gradient(to right, #f59e0b, #fde047, #f59e0b)'
        }
      };
      
      // 如果沒有指定心情分數，使用預設的綠色系
      const scheme = colorSchemes[moodScore] || colorSchemes[3];
      
      // 1. 能量球亮起動畫
      setTimeout(() => {
        energyBar.style.transform = 'scale(1.1)';
        energyBar.style.boxShadow = `0 0 25px ${scheme.colors[0].color}80, 0 0 50px ${scheme.colors[1].color}40`;
        energyBar.style.background = scheme.energyBar;
        
        // 添加脈動效果
        energyBar.style.animation = 'energyPulse 0.6s ease-in-out';
        
        setTimeout(() => {
          energyBar.style.transform = 'scale(1)';
          energyBar.style.boxShadow = `0 0 0 1px ${scheme.colors[0].color}15`;
          energyBar.style.background = scheme.energyBar;
          energyBar.style.animation = '';
        }, 600);
      }, 300);
      
      // 2. 更新常駐能量球顏色
      setTimeout(() => {
        if (moodScore) {
          updateEnergyBall(moodScore);
        }
      }, 500);
      
      // 3. 能量粒子效果
      for (let i = 0; i < 8; i++) {
        setTimeout(() => {
          const particle = document.createElement('div');
          particle.className = 'absolute w-1 h-1 bg-emerald-400 rounded-full';
          particle.style.left = Math.random() * 100 + '%';
          particle.style.top = Math.random() * 100 + '%';
          particle.style.animation = 'particleFloat 1.5s ease-out forwards';
          particle.style.zIndex = '10';
          energyCard.appendChild(particle);
          
          setTimeout(() => particle.remove(), 1500);
        }, i * 80);
      }
      
      // 4. 成功音效提示（視覺）
      setTimeout(() => {
        const successIcon = document.createElement('div');
        successIcon.innerHTML = '✨';
        successIcon.style.position = 'absolute';
        successIcon.style.left = '50%';
        successIcon.style.top = '50%';
        successIcon.style.transform = 'translate(-50%, -50%)';
        successIcon.style.fontSize = '24px';
        successIcon.style.animation = 'successPop 0.8s ease-out';
        successIcon.style.zIndex = '15';
        energyCard.appendChild(successIcon);
        
        setTimeout(() => successIcon.remove(), 800);
      }, 800);
    }
  });
</script>

<style>
  @keyframes energyPulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
  }
  
  @keyframes energyRotate {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
  
  @keyframes energyBallAppear {
    0% { 
      transform: scale(0) rotate(-180deg);
      opacity: 0;
    }
    50% { 
      transform: scale(1.3) rotate(-90deg);
      opacity: 1;
    }
    100% { 
      transform: scale(1) rotate(0deg);
      opacity: 1;
    }
  }
  
  @keyframes particleFloat {
    0% { 
      transform: translateY(0) scale(0);
      opacity: 1;
    }
    50% { 
      transform: translateY(-20px) scale(1);
      opacity: 0.8;
    }
    100% { 
      transform: translateY(-40px) scale(0);
      opacity: 0;
    }
  }
  
  @keyframes successPop {
    0% { 
      transform: translate(-50%, -50%) scale(0);
      opacity: 0;
    }
    50% { 
      transform: translate(-50%, -50%) scale(1.3);
      opacity: 1;
    }
    100% { 
      transform: translate(-50%, -50%) scale(1);
      opacity: 0;
    }
  }
  
  @keyframes fadeInUp {
    0% { 
      transform: translateX(-50%) translateY(10px);
      opacity: 0;
    }
    100% { 
      transform: translateX(-50%) translateY(0);
      opacity: 1;
    }
  }
  
  @keyframes fadeOutUp {
    0% { 
      transform: translateX(-50%) translateY(0);
      opacity: 1;
    }
    100% { 
      transform: translateX(-50%) translateY(-10px);
      opacity: 0;
    }
  }
  
  @keyframes energyHappy {
    0% { 
      transform: scale(1) rotate(0deg);
    }
    25% { 
      transform: scale(1.1) rotate(5deg);
    }
    50% { 
      transform: scale(1.2) rotate(-5deg);
    }
    75% { 
      transform: scale(1.1) rotate(3deg);
    }
    100% { 
      transform: scale(1) rotate(0deg);
    }
  }
</style>